
/* texture.h - by David Blythe, SGI */

/* Simple SGI .rgb image file loader routine. */
unsigned *
read_texture(char *name, int *width, int *height, int *components);

extern void imgLoad(char *filenameIn, 
  int borderIn, GLfloat borderColorIn[4],
  int *wOut, int *hOut, GLubyte ** imgOut);

void InitAllTextures(void);
void ReloadAllTextures(void);
//void UseLibTexture(long id);
void UseLibTexture(long id, bool refresh=false);

long GetTextureID(char *name);
long NextTextureID(long id, long jump);

bool getTextureInfo(int id, char **pname, int *pw, int *ph);

bool ejSimpleJPEGRead(FILE *inputFile, void *inputMem, int inputMemSize, void **pOutData, unsigned int *pOutWidth, unsigned int *pOutHeight, unsigned int *pOutBPP);

enum {
	TEXID_NONE,
	TEXID_CELL,
	TEXID_BUBBLE,
	TEXID_BEN,
	TEXID_CHARACTER1,
	TEXID_CHARACTER2,
	TEXID_BOARD1,
	TEXID_BOARD2,
	TEXID_GRID,
	TEXID_FULLBUBBLE,

//	TEXID_PATIENT,
	TEXID_SHIELD_BLANK,
	TEXID_SHIELD_POX,
	TEXID_SHIELD_COLDS,
	TEXID_SHIELD_RASH,
	TEXID_SHIELD_BARF,
	TEXID_SHIELD_FEVER,
	TEXID_SHIELD_HAIR,
	TEXID_SHIELD_FOOT,

	TEXID_THERMOMETER,
	TEXID_COMPASS,

	TEXID_ICON_HEALTH,
	TEXID_ICON_AMMO,
	TEXID_ICON_ATTITUDE,

	TEXID_ZAP,
	TEXID_GLOWSPARK,
	TEXID_GLOWSWEEP,

	TEXID_WEAPON_BLASTER,
	TEXID_WEAPON_SLINGSHOT,
	TEXID_WEAPON_SWORD,
	TEXID_WEAPON_MISSILE,
	TEXID_WEAPON_BALLISTIC,
	TEXID_WEAPON_CROSSBOW,
	TEXID_WEAPON_PARTICLE_ACCELERATOR,

	TEXID_SLIDE1,
	TEXID_CONTROLS,
	TEXID_HELP_MONSTERS,
	TEXID_HELP_SETBACK,
	TEXID_HELP_WEAPON,
	TEXID_HELP_HEALTH,
	TEXID_HELP_CUSTOM,
	TEXID_CIRCLE_R,

	TEXID_HUD_GRAPH,
	TEXID_TEXT_COMPLETE,

	TEXID_BOSS1A,
	TEXID_BOSS1F,
	TEXID_BOSS2A,
	TEXID_BOSS2F,
	TEXID_BOSS3A,
	TEXID_BOSS3F,
	TEXID_BOSS4A,
	TEXID_BOSS4F,
	TEXID_BOSS5A,
	TEXID_BOSS5F,
	TEXID_BOSS6A,
	TEXID_BOSS6F,
	TEXID_BOSS7A,
	TEXID_BOSS7F,

	TEXID_LAUNCH_BARF,
	TEXID_LAUNCH_SNOW,
	TEXID_LAUNCH_FIRE,
	TEXID_LAUNCH_BALL,
	TEXID_LAUNCH_BATS,
	TEXID_LAUNCH_DUST,
	TEXID_LAUNCH_POX,
	TEXID_LAUNCH_RUBBER_CHICKEN,

	TEXID_BUTTON_BIG_PLAY,
	TEXID_BUTTON_BIG_WIN,
	TEXID_BUTTON_BLANK,
	TEXID_BUTTON_SKINNY,
	TEXID_BUTTON_QUIT,
	TEXID_BUTTON_THANKS,	//BUTTON_ID_THANKS,
	TEXID_BUTTON_MAW,	//BUTTON_ID_MAW,
	TEXID_BUTTON_OPTIONS,	//BUTTON_ID_OPTIONS,
	TEXID_BUTTON_HELP,	//BUTTON_ID_HELP,
	TEXID_BUTTON_FORTUNE,	//BUTTON_ID_FORTUNE,
	TEXID_BUTTON_SCORES,	//BUTTON_ID_SCORES,
	TEXID_BUTTON_1P,
	TEXID_BUTTON_2P,
	TEXID_BUTTON_BACK,
	TEXID_BUTTON_PLAY,
	TEXID_BUTTON_EASY,
	TEXID_BUTTON_MEDIUM,
	TEXID_BUTTON_HARD,
	TEXID_BUTTON_BODY, 
	TEXID_BUTTON_BOARD,
	TEXID_BUTTON_DONATION,
	TEXID_BUTTON_CHECKBOX,

	TEXID_LEC_LOGO,
	TEXID_FONT_MAIN,

	TEXID_BUTTON_FLAG_00,
	TEXID_BUTTON_FLAG_01,
	TEXID_BUTTON_FLAG_02,
	TEXID_BUTTON_FLAG_03,
	TEXID_BUTTON_FLAG_04,
	TEXID_BUTTON_FLAG_05,
	TEXID_BUTTON_FLAG_06,
	TEXID_BUTTON_FLAG_07,
	TEXID_BUTTON_FLAG_08,
	TEXID_BUTTON_FLAG_09,
	TEXID_BUTTON_FLAG_10,
	TEXID_BUTTON_FLAG_11,
	TEXID_BUTTON_FLAG_12,
	TEXID_BUTTON_FLAG_13,
	TEXID_BUTTON_FLAG_14,
	TEXID_BUTTON_FLAG_15,
	TEXID_BUTTON_FLAG_16,
	TEXID_BUTTON_FLAG_17,
	TEXID_BUTTON_FLAG_18,
	TEXID_BUTTON_FLAG_19,
	TEXID_BUTTON_FLAG_20,
	TEXID_BUTTON_FLAG_21,
	TEXID_BUTTON_FLAG_22,
	TEXID_BUTTON_FLAG_23,
	TEXID_BUTTON_FLAG_24,
	TEXID_BUTTON_FLAG_25,
	TEXID_BUTTON_FLAG_26,
	TEXID_BUTTON_FLAG_27,
	TEXID_BUTTON_FLAG_28,
	TEXID_BUTTON_FLAG_29,

	TEXID_HOWMANY	/**** just to count and terminate ****/
};

typedef struct libMip {
	unsigned int	*image;
	int				width;
	int				height;
	struct libMip	*next;
} libMip;

typedef struct libTexture {
	uint32			globalID;
	char			*fileName;
	unsigned int	*image;
	int32			loadFlags;
	int32			width;
	int32			height;
	int32			components;
	libMip			*mips;
	uint32			binding;
} libTexture;

// Texture path defined in Texture.c
extern char *TexturePath;

void switchLoadedTexture(int32 id, char *name);
